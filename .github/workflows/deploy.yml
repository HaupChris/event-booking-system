name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository owner to lowercase
        run: echo "REPO_OWNER_LOWERCASE=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/wiesenwahn-backend:latest

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ghcr.io/${{ env.REPO_OWNER_LOWERCASE }}/wiesenwahn-frontend:latest

      - name: Prepare docker-compose.yml with environment variables
        run: |
          # Set the repo owner in docker-compose.yml
          sed -i 's/${REPO_OWNER}/${{ env.REPO_OWNER_LOWERCASE }}/g' docker-compose.yml

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create deployment directory if it doesn't exist
            mkdir -p /opt/wiesenwahn
            mkdir -p /opt/wiesenwahn/data
            mkdir -p /opt/wiesenwahn/logs
            
            # Create an empty database file if it doesn't exist
            if [ ! -f /opt/wiesenwahn/data/bookings.db ]; then
              touch /opt/wiesenwahn/data/bookings.db
              chmod 666 /opt/wiesenwahn/data/bookings.db
            fi
            
            # Backup the database before updating
            bash /opt/wiesenwahn/backup.sh deploy-backup || true
            
            # Create .env file with secrets
            cat > /opt/wiesenwahn/.env << EOL
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
            USER_PASSWORD=${{ secrets.USER_PASSWORD }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
            ARTIST_PASSWORD=${{ secrets.ARTIST_PASSWORD }}
            GMAIL_USER=${{ secrets.GMAIL_USER }}
            GMAIL_PASS=${{ secrets.GMAIL_PASS }}
            EOL
            
            # Pull latest images
            cd /opt/wiesenwahn
            docker-compose pull
            
            # Restart services
            docker-compose down
            docker-compose up -d
            
            # Clean up old images
            docker image prune -af

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/opt/wiesenwahn/"
          overwrite: true